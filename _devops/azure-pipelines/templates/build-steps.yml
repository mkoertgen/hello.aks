steps:
# ---- docker ---
- displayName: 'docker build'
  bash: |
    cd $(projectName)
    docker build \
        -t $(registryServerName)/$(imageName):$(imageTag) \
        .
  failOnStderr: true

# push on master only
- displayName: 'docker login'
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  bash: |
    echo $(registryPassword) | docker login \
        $(registryServerName) \
        -u $(registryLogin) \
        --password-stdin
- displayName: 'docker push'
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  failOnStderr: true
  bash: |
    docker push $(registryServerName)/$(imageName):$(imageTag)

# ---- helm ---
- displayName: 'install helm'
  task: HelmInstaller@1
  inputs:
    helmVersionToInstall: $(helmVersion)

- displayName: 'helm package'
  failOnStderr: true
  bash: |
    cd $(projectName)
    helm package \
        --version $(helmChartVersion) \
        --app-version $(imageTag) \
        charts/$(projectName)

# push on master only
- name: helmPush
  displayName: 'az acr helm push'
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  failOnStderr: true
  bash: |
    cd $(projectName)
    chartPackage=$(ls $(projectName)-*.tgz)
    az acr helm push \
        -n $(registryName) \
        -u $(registryLogin) \
        -p $(registryPassword) \
        $chartPackage
    echo $(jq -n --arg version "$(helmChartVersion)" '{helmChartVersion: $version}') > $(build.artifactStagingDirectory)/variables.json

# ---- variables.json ---
- publish: $(build.artifactStagingDirectory)
  artifact: build-artifact
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
